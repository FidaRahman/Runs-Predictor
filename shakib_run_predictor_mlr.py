# -*- coding: utf-8 -*-
"""Shakib_Run_Predictor MLR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MEnGfi86chipLzp0GaoCVxD81n-yiO0B
"""

import numpy as np
import sys
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer
from sklearn.metrics import r2_score
from sklearn import preprocessing
# from tensorflow import keras

dataset = pd.read_csv('Shakib.csv')

heat_map_corr = dataset.corr()
fig, ax = plt.subplots(figsize=(20,20))
sns.heatmap(heat_map_corr, annot=True, linewidths=.5, ax=ax)

dataset

X = dataset.iloc[:, dataset.columns != 'Runs'].values
y = dataset.iloc[:, 0].values
y = y.reshape(len(y), 1)

# Dependent variable- Runs
y

# Independent Variable- rest
X

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = None)
# X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=None)

print("X_train shape:", X_train.shape)
print("y_train shape:", y_train.shape)
# print("X_val shape:", X_val.shape)
# print("y_val shape:", y_val.shape)
print("X_test shape:", X_test.shape)
print("y_test shape:", y_test.shape)

print(len(X_train),len(X_test),len(y_train),len(y_test))

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
sc_y = StandardScaler()
X_train[:,[0,1,3,4]] = sc_X.fit_transform(X_train[:,[0,1,3,4]])
X_test[:,[0,1,3,4]] = sc_X.fit_transform(X_test[:,[0,1,3,4]])
y_train = sc_y.fit_transform(y_train)
y_test = sc_y.fit_transform(y_test)

X_train

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

y_pred = regressor.predict(X_test)
np.set_printoptions(precision=2)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

g = regressor.predict([[69,84.06,1,5,1,1,1,0,0,0,1,1]])
print(g.reshape(len(g),1))

regressor.score(X_train,y_train)

regressor.score(X_test,y_test)

len(y_pred)

plt.rcParams["figure.figsize"] = [8.5, 5]
plt.rcParams["figure.autolayout"] = True

plt.title("Shakib Al Hasan") 
plt.xlabel("Dependent") 
plt.ylabel("Runs") 
x = np.arange(0,15) 
y1 = y_pred
y2 = y_test

plt.plot(x, y1, "-b", label="y_pred")
plt.plot(x, y2, "-r", label="y_test")
plt.legend(loc="upper left")
plt.show()

r2_score(y_test, y_pred)*100